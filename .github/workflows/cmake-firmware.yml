name: CMake Firmware

on:
  push:
  pull_request:
    types: [opened, edited, closed, reopened]

env:
  PICO_SDK_DIR: ./pico-sdk
  FIRMWARE_ARTIFACT_PATH: ./build/

concurrency:
  group: ${{ github.head_ref || github.run_id || github.event.number }}
  cancel-in-progress: true

jobs:
  build-firmware:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: recursive

    - name: Checkout Pico SDK
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-sdk
        path: ${{ env.PICO_SDK_DIR }}
        submodules: recursive

    - name: Cache Pico SDK and dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PICO_SDK_DIR }}
          ~/.cache/pip
          ~/Library/Caches/Homebrew
          C:\ProgramData\Chocolatey
        key: ${{ runner.os }}-pico-sdk-${{ hashFiles('**/pico-sdk/**') }}
        restore-keys: ${{ runner.os }}-pico-sdk-

#    - name: Install dependencies (Ubuntu)
#      if: matrix.os == 'ubuntu-latest'
#      run: |
#        sudo apt-get update -y
#        sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib build-essential
#      shell: bash

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install python --version=3.12.6
        choco install ninja
        choco install git
        choco install arm-none-eabi-gcc
      shell: powershell

#    - name: Install dependencies (macOS)
#      if: matrix.os == 'macos-latest'
#      run: |
#        brew install cmake
#        brew install python3
#        brew install ninja
#        brew install arm-none-eabi-gcc
#      shell: bash

    - name: Set PICO_SDK_PATH in CMakeLists.txt
      run: |
        sed -i 's|#set(PICO_SDK_PATH.*|set(PICO_SDK_PATH "${{ github.workspace }}/${{ env.PICO_SDK_DIR }}")|' CMakeLists.txt
        cat CMakeLists.txt
      shell: bash
      working-directory: ${{ github.workspace }}

    - name: Create Build Environment
      run: cmake -E make_directory ${{ github.workspace }}/build
      shell: bash

    - name: Configure CMake
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake .. -DPICO_BOARD=pico
      shell: bash

    - name: Build Firmware
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake --build . --parallel
      shell: bash

    - name: List Build Artifacts
      working-directory: ${{ github.workspace }}/build
      run: ls -laR
      shell: bash

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: pico_rectangle_${{ github.sha }}.uf2
        path: ${{ github.workspace }}/build/pico_rectangle.uf2
        if-no-files-found: error
        retention-days: 30

    - name: Upload firmware (Ult with 2IP With Reactivation SOCD) artifact
      uses: actions/upload-artifact@v4
      with:
        name: pico_rectangle_ult_2ip_with_reac_socd_${{ github.sha }}.uf2
        path: ${{ github.workspace }}/build/pico_rectangle_ULT_2IP_WITH_REAC.uf2
        if-no-files-found: error
        retention-days: 30

    - name: Upload firmware (Ult with Neutral SOCD) artifact
      uses: actions/upload-artifact@v4
      with:
        name: pico_rectangle_ult_neutral_socd_${{ github.sha }}.uf2
        path: ${{ github.workspace }}/build/pico_rectangle_ULT_NEUTRAL.uf2
        if-no-files-found: error
        retention-days: 30
