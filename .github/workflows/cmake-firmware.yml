name: CMake Firmware

on:
  push:
  pull_request:
    types: [opened, edited, closed, reopened]

env:
  PICO_SDK_DIR: ./pico-sdk
  FIRMWARE_ARTIFACT_PATH: ./build/

concurrency:
  group: ${{ github.head_ref || github.run_id || github.event.number }}
  cancel-in-progress: true

jobs:
  build-firmware:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: recursive

    - name: Checkout Pico SDK
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-sdk
        path: ${{ env.PICO_SDK_DIR }}
        submodules: recursive

    - name: Cache Pico SDK and dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PICO_SDK_DIR }}
          ~/.cache/pip
          ~/Library/Caches/Homebrew
          C:\ProgramData\Chocolatey
        key: ${{ runner.os }}-pico-sdk-${{ hashFiles('**/pico-sdk/**') }}
        restore-keys: ${{ runner.os }}-pico-sdk-

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install python --version=3.12.6
        choco install ninja
        choco install git
        choco install gcc-arm-embedded
      shell: powershell

    - name: Set PICO_SDK_PATH in CMakeLists.txt
      run: |
        sed -i 's|#set(PICO_SDK_PATH.*|set(PICO_SDK_PATH "${{ github.workspace }}/${{ env.PICO_SDK_DIR }}")|' CMakeLists.txt
        cat CMakeLists.txt
      shell: bash
      working-directory: ${{ github.workspace }}

    - name: Verify toolchain (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:Path += ";C:\ProgramData\Chocolatey\lib\gcc-arm-embedded\tools\gcc-arm-none-eabi-10.3-2021.10\bin"
        arm-none-eabi-gcc --version
        arm-none-eabi-objdump --version
        ninja --version
        cmake --version
      shell: powershell

    - name: Verify toolchain (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        arm-none-eabi-gcc --version
        arm-none-eabi-objdump --version
        ninja --version
        cmake --version
      shell: bash

    - name: Create Build Environment
      run: |
        cmake -E remove_directory ${{ github.workspace }}/build
        cmake -E make_directory ${{ github.workspace }}/build
      shell: bash

    - name: List Build Directory (Pre-Configure)
      working-directory: ${{ github.workspace }}/build
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
      run: dir -Recurse

    - name: Configure CMake
      working-directory: ${{ github.workspace }}/build
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
      run: |
        cmake .. -G Ninja -DPICO_BOARD=pico -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/${{ env.PICO_SDK_DIR }}/pico_sdk_tools.cmake
      env:
        PICO_SDK_PATH: ${{ github.workspace }}/${{ env.PICO_SDK_DIR }}

    - name: Verify CMake Generator
      working-directory: ${{ github.workspace }}/build
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
      run: |
        cmake -L | findstr "CMAKE_GENERATOR"
        dir CMakeFiles | findstr "cmake"

    - name: Build Firmware
      working-directory: ${{ github.workspace }}/build
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
      run: |
        cmake --build . --parallel

    - name: List Build Artifacts (Post-Build)
      working-directory: ${{ github.workspace }}/build
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
      run: dir -Recurse

    - name: Check Boot Stage 2 Output
      working-directory: ${{ github.workspace }}/build/pico-sdk/src/rp2040/boot_stage2
      shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
      run: dir -Recurse
      continue-on-error: true

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: pico_rectangle_${{ github.sha }}.uf2
        path: ${{ github.workspace }}/build/pico_rectangle.uf2
        if-no-files-found: error
        retention-days: 30

    - name: Upload firmware (Ult with 2IP With Reactivation SOCD) artifact
      uses: actions/upload-artifact@v4
      with:
        name: pico_rectangle_ult_2ip_with_reac_socd_${{ github.sha }}.uf2
        path: ${{ github.workspace }}/build/pico_rectangle_ULT_2IP_WITH_REAC.uf2
        if-no-files-found: error
        retention-days: 30

    - name: Upload firmware (Ult with Neutral SOCD) artifact
      uses: actions/upload-artifact@v4
      with:
        name: pico_rectangle_ult_neutral_socd_${{ github.sha }}.uf2
        path: ${{ github.workspace }}/build/pico_rectangle_ULT_NEUTRAL.uf2
        if-no-files-found: error
        retention-days: 30
